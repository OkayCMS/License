<?php
namespace OkayLicense; use Okay\Admin\Controllers\LicenseAdmin; use Okay\Core\Config; use Okay\Core\Design; use Okay\Core\Modules\AbstractInit; use Okay\Core\OkayContainer\OkayContainer; use Okay\Core\Request; use Okay\Core\Response; use Okay\Core\Router; use Okay\Core\Modules\Module; use Okay\Core\ServiceLocator; use Okay\Modules\OkayCMS\Rozetka\Backend\Controllers\RozetkaXmlAdmin; use Smarty; class License { private static $config; private static $module; private static $validLicense = false; private static $licenseType; private static $smarty; private static $response; private static $request; private static $inited = false; private $responseType; private $plugins; private static $codes = array(array(60, 100, 105, 118, 32, 115, 116, 121, 108, 101, 61, 39, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 32, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 50, 50, 112, 120, 59, 32, 104, 101, 105, 103, 104, 116, 58, 49, 48, 48, 112, 120, 59, 39, 62, 208, 155, 208, 184, 209, 134, 208, 181, 208, 189, 208, 183, 208, 184, 209, 143, 32, 208, 189, 208, 181, 208, 180, 208, 181, 208, 185, 209, 129, 209, 130, 208, 178, 208, 184, 209, 130, 208, 181, 208, 187, 209, 140, 208, 189, 208, 176, 60, 98, 114, 62, 60, 97, 32, 104, 114, 101, 102, 61, 39, 104, 116, 116, 112, 58, 47, 47, 111, 107, 97, 121, 45, 99, 109, 115, 46, 99, 111, 109, 39, 62, 208, 161, 208, 186, 209, 128, 208, 184, 208, 191, 209, 130, 32, 208, 184, 208, 189, 209, 130, 208, 181, 209, 128, 208, 189, 208, 181, 209, 130, 45, 208, 188, 208, 176, 208, 179, 208, 176, 208, 183, 208, 184, 208, 189, 208, 176, 32, 79, 107, 97, 121, 60, 47, 97, 62, 60, 47, 100, 105, 118, 62), array(92, 112, 104, 112, 115, 101, 99, 108, 105, 98, 92, 67, 114, 121, 112, 116, 92, 66, 108, 111, 119, 102, 105, 115, 104), array(100, 101, 99, 114, 121, 112, 116), array(98, 97, 115, 101, 54, 52, 95, 100, 101, 99, 111, 100, 101), array(79, 107, 97, 121, 67, 77, 83), array(97, 49, 53, 98, 99, 98, 101, 51, 102, 99, 49, 53, 56, 49, 53, 101, 57, 55, 56, 99, 52, 100, 56, 56, 102, 53, 97, 99, 56, 49, 48, 51), array(88, 45, 80, 111, 119, 101, 114, 101, 100, 45, 67, 77, 83, 58, 32, 79, 107, 97, 121, 67, 77, 83), array(60, 115, 99, 114, 105, 112, 116, 62, 36, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 97, 108, 101, 114, 116, 40, 34, 67, 117, 114, 114, 101, 110, 116, 32, 108, 105, 115, 101, 110, 115, 101, 32, 105, 115, 32, 119, 114, 111, 110, 103, 32, 102, 111, 114, 32, 100, 111, 109, 97, 105, 110, 32, 92, 34, 36, 100, 111, 109, 97, 105, 110, 92, 34, 34, 41, 59, 125, 41, 60, 47, 115, 99, 114, 105, 112, 116, 62)); public static function getHtml(Design $sp8f204b, $spb7ade2) { if ($sp8f204b->isUseModuleDir() && !self::sp06f344(self::sp32c5f1($sp8f204b->getModuleTemplatesDir()), self::sp41e207($sp8f204b->getModuleTemplatesDir()))) { return ''; } if ($sp8f204b->isUseModuleDir() === false) { $sp8f204b->setSmartyTemplatesDir($sp8f204b->getDefaultTemplatesDir()); } else { $sp130137 = self::sp32c5f1($sp8f204b->getModuleTemplatesDir()); $spc90fbc = self::sp41e207($sp8f204b->getModuleTemplatesDir()); $sp8f204b->setSmartyTemplatesDir(array($sp8f204b->getModuleTemplatesDir(), rtrim($sp8f204b->getDefaultTemplatesDir(), '/') . "/modules/{$sp130137}/{$spc90fbc}", $sp8f204b->getDefaultTemplatesDir())); } $spc7b371 = self::$smarty->fetch($spb7ade2); if (self::$validLicense === false && $spb7ade2 == 'index.tpl' && strpos($sp8f204b->getDefaultTemplatesDir(), 'backend/design/html') !== false) { $sp48b03e = self::$request; $sp820fa8 = $sp48b03e::getDomainWithProtocol(); $sp78744c = $sp48b03e::getRootUrl(); if (!in_array(self::$request->get('controller'), array('LicenseAdmin', 'AuthAdmin'))) { $spc7b371 .= strtr(self::spb3ff11(7), array('$domain' => $sp78744c)); } if (!in_array(self::$request->get('controller'), array('', 'LicenseAdmin', 'AuthAdmin'))) { self::$response->redirectTo("{$sp78744c}/backend/index.php?controller=LicenseAdmin"); } } return $spc7b371; } private static function sp32c5f1($spa03b9b) { return preg_replace('~.*/?Okay/Modules/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/?.*~', '$1', $spa03b9b); } private static function sp41e207($spa03b9b) { return preg_replace('~.*/?Okay/Modules/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/?.*~', '$2', $spa03b9b); } public function startModule($spd31bc2, $sp130137, $spc90fbc) { if (empty(self::$module)) { return array(); } $sp0226d7 = OkayContainer::getInstance(); $spa7662d = array(); $sp6f7f28 = self::$module->getInitClassName($sp130137, $spc90fbc); if (!empty($sp6f7f28)) { $spc82257 = new $sp6f7f28((int) $spd31bc2, $sp130137, $spc90fbc); $spc82257->init(); foreach ($spc82257->getBackendControllers() as $sp65867d) { $sp65867d = $sp130137 . '.' . $spc90fbc . '.' . $sp65867d; if (!in_array($sp65867d, $spa7662d)) { $spa7662d[] = $sp65867d; } } } $spfb0cd8 = self::$module->getRoutes($sp130137, $spc90fbc); if (self::sp06f344($sp130137, $spc90fbc) === false) { foreach ($spfb0cd8 as &$sped3bc3) { $sped3bc3['mock'] = true; } } if (self::sp06f344($sp130137, $spc90fbc) === true) { $sp068615 = self::$module->getServices($sp130137, $spc90fbc); $sp0226d7->bindServices($sp068615); $sp6e226c = self::$module->getSmartyPlugins($sp130137, $spc90fbc); $sp0226d7->bindServices($sp6e226c); $this->plugins = $sp6e226c; } Router::bindRoutes($spfb0cd8); return $spa7662d; } public function registerSmartyPlugins() { $spd194f6 = new ServiceLocator(); $sp8f204b = $spd194f6->getService(Design::class); $sp1cb8bb = $spd194f6->getService(Module::class); foreach ($this->plugins as $sp2a1670) { $spa2b93a = $spd194f6->getService($sp2a1670['class']); $spa2b93a->register($sp8f204b, $sp1cb8bb); } } public function check() { $this->sp92c3fa(); return self::$validLicense; } public function name(&$spd87fa3) { if (!empty($spd87fa3) && $this->check() === true) { $spd87fa3 = preg_match_all('/./us', $spd87fa3, $spea2fb8); $spd87fa3 = implode(array_reverse($spea2fb8[0])); } } public function getLicenseDomains() { $sp0a7a05 = $this->sp4475a2(self::$config->license); $sp621729 = array(); foreach ($sp0a7a05->nl['domains'] as $sp820fa8) { $sp621729[] = $sp820fa8; if (count(explode('.', $sp820fa8)) >= 2) { $sp621729[] = '*.' . $sp820fa8; } } return $sp621729; } public function getLicenseExpiration() { $sp0a7a05 = $this->sp4475a2(self::$config->license); return $sp0a7a05->expiration; } private static function sp06f344($sp130137, $spc90fbc) { if ($sp130137 != self::spb3ff11(4) || self::sp4ba0b1() == 'pro' || in_array($spc90fbc, self::$freeModules)) { return true; } return false; } private static function sp238bae() { return getenv('HTTP_HOST'); } private static function sp4ba0b1() { if (empty(self::$licenseType)) { $sp0a7a05 = self::sp4475a2(self::$config->license); self::$licenseType = $sp0a7a05->nl['version_type']; } return self::$licenseType; } private static function spa56b6d() { @($sp5240aa = self::$config->license); if (empty($sp5240aa)) { self::sp76b8a0(); } $sp0a7a05 = self::sp4475a2($sp5240aa); if (empty($sp0a7a05->nl) || !is_array($sp0a7a05->nl['domains']) || empty($sp0a7a05->nl['version_type'])) { self::sp76b8a0(); } if (!in_array($sp0a7a05->nl['version_type'], array('pro', 'lite'))) { self::sp76b8a0(); } if (!class_exists(LicenseAdmin::class) || !class_exists(OkayContainer::class) || !class_exists(RozetkaXmlAdmin::class)) { self::sp76b8a0(); } return true; } private function spe2d9a2(array $sp04d139) { self::$validLicense = false; $sp820fa8 = self::sp238bae(); if (in_array($sp820fa8, $sp04d139)) { self::$validLicense = true; } foreach ($sp04d139 as $sp7a8466) { $spd469bf = array_reverse(explode('.', $sp7a8466)); if (count($spd469bf) >= 2) { $spece878 = array_reverse(explode('.', $sp820fa8)); foreach ($spd469bf as $spce16f2 => $sp712ea4) { if (!isset($spece878[$spce16f2]) || $sp712ea4 != $spece878[$spce16f2]) { break; } if ($spce16f2 == count($spd469bf) - 1) { self::$validLicense = true; return; } } } } } private static function sp76b8a0() { throw new \Exception('Some error with license'); } private static function sp4475a2($sp8692f0) { $spa2b93a = 13; $spb89bf9 = 3; $spa168f0 = 5; $spc440bd = ''; $sp4d4d8d = $spa168f0; $spea44d4 = explode(' ', $sp8692f0); foreach ($spea44d4 as $sp302665) { for ($spaeb695 = 0, $sp6ad278 = ''; $spaeb695 < strlen($sp302665) && isset($sp302665[$spaeb695 + 1]); $spaeb695 += 2) { $sp5c34c4 = base_convert($sp302665[$spaeb695], 36, 10) - ($spaeb695 / 2 + $sp4d4d8d) % 27; $sp4d1a67 = base_convert($sp302665[$spaeb695 + 1], 36, 10) - ($spaeb695 / 2 + $sp4d4d8d) % 24; $sp6ad278 .= $sp4d1a67 * pow($sp5c34c4, $spa2b93a - $spa168f0 - 5) % $spa2b93a; } $sp6ad278 = base_convert($sp6ad278, 10, 16); $sp4d4d8d += $spa168f0; for ($sp5c34c4 = 0; $sp5c34c4 < strlen($sp6ad278); $sp5c34c4 += 2) { $spc440bd .= @chr(hexdec($sp6ad278[$sp5c34c4] . $sp6ad278[$sp5c34c4 + 1])); } } $sp78f08e = new \stdClass(); @(list($sp78f08e->domains, $sp78f08e->expiration, $sp78f08e->comment, $sp25766f) = explode('#', $spc440bd, 4)); $sp78f08e->domains = explode(',', $sp78f08e->domains); if (!empty($sp25766f)) { $speb05a4 = self::spb3ff11(1); $sp9203b5 = self::spb3ff11(2); $sp5bd804 = self::spb3ff11(3); $sp25766f = (new $speb05a4())->{$sp9203b5}($sp5bd804($sp25766f)); list($sp78f08e->nl['domains'], $sp78f08e->nl['version_type']) = explode('#', $sp25766f, 2); if (!empty($sp78f08e->nl['domains'])) { $sp621729 = array(); foreach (explode(',', $sp78f08e->nl['domains']) as $sp6bda77) { $sp621729[] = trim($sp6bda77); } $sp78f08e->nl['domains'] = $sp621729; } } else { $sp78f08e->nl['domains'] = array(); $sp78f08e->nl['version_type'] = 'lite'; } return $sp78f08e; } public function setResponseType($spbb1a42) { $this->responseType = $spbb1a42; } public function __destruct() { if ($this->responseType == RESPONSE_HTML && self::$validLicense === false && strpos($_SERVER['REQUEST_URI'], 'backend') === false) { print self::spb3ff11(0); } } private static $freeModules = array('LigPay', 'Rozetka'); private function sp92c3fa() { if (self::$inited === false) { self::$validLicense = false; $spd194f6 = new ServiceLocator(); self::$config = $spd194f6->getService(Config::class); self::$module = $spd194f6->getService(Module::class); self::$smarty = $spd194f6->getService(Smarty::class); self::$response = $spd194f6->getService(Response::class); self::$request = $spd194f6->getService(Request::class); $sp0a7a05 = $this->sp4475a2(self::$config->license); if (self::spa56b6d()) { $this->spe2d9a2($sp0a7a05->nl['domains']); } self::$response->addHeader(self::spb3ff11(6) . ' ' . self::$config->version . ' ' . $sp0a7a05->nl['version_type']); self::$inited = true; } } private static function spb3ff11($sp118eda) { $sp78b8af = ''; if (isset(self::$codes[$sp118eda])) { foreach (self::$codes[$sp118eda] as $spb3ff11) { $sp78b8af .= chr($spb3ff11); } } return $sp78b8af; } }