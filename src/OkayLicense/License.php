<?php
namespace OkayLicense; use Okay\Admin\Controllers\LicenseAdmin; use Okay\Core\Config; use Okay\Core\Design; use Okay\Core\Modules\AbstractInit; use Okay\Core\OkayContainer\OkayContainer; use Okay\Core\Request; use Okay\Core\Response; use Okay\Core\Router; use Okay\Core\Modules\Module; use Okay\Core\ServiceLocator; use Okay\Modules\OkayCMS\Rozetka\Backend\Controllers\RozetkaXmlAdmin; use Smarty; class License { private static $config; private static $module; private static $validLicense = false; private static $licenseType; private static $smarty; private static $response; private static $request; private static $inited = false; private $responseType; private static $codes = array(array(60, 100, 105, 118, 32, 115, 116, 121, 108, 101, 61, 39, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 32, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 50, 50, 112, 120, 59, 32, 104, 101, 105, 103, 104, 116, 58, 49, 48, 48, 112, 120, 59, 39, 62, 208, 155, 208, 184, 209, 134, 208, 181, 208, 189, 208, 183, 208, 184, 209, 143, 32, 208, 189, 208, 181, 208, 180, 208, 181, 208, 185, 209, 129, 209, 130, 208, 178, 208, 184, 209, 130, 208, 181, 208, 187, 209, 140, 208, 189, 208, 176, 60, 98, 114, 62, 60, 97, 32, 104, 114, 101, 102, 61, 39, 104, 116, 116, 112, 58, 47, 47, 111, 107, 97, 121, 45, 99, 109, 115, 46, 99, 111, 109, 39, 62, 208, 161, 208, 186, 209, 128, 208, 184, 208, 191, 209, 130, 32, 208, 184, 208, 189, 209, 130, 208, 181, 209, 128, 208, 189, 208, 181, 209, 130, 45, 208, 188, 208, 176, 208, 179, 208, 176, 208, 183, 208, 184, 208, 189, 208, 176, 32, 79, 107, 97, 121, 60, 47, 97, 62, 60, 47, 100, 105, 118, 62), array(92, 112, 104, 112, 115, 101, 99, 108, 105, 98, 92, 67, 114, 121, 112, 116, 92, 66, 108, 111, 119, 102, 105, 115, 104), array(100, 101, 99, 114, 121, 112, 116), array(98, 97, 115, 101, 54, 52, 95, 100, 101, 99, 111, 100, 101), array(79, 107, 97, 121, 67, 77, 83), array(97, 49, 53, 98, 99, 98, 101, 51, 102, 99, 49, 53, 56, 49, 53, 101, 57, 55, 56, 99, 52, 100, 56, 56, 102, 53, 97, 99, 56, 49, 48, 51), array(88, 45, 80, 111, 119, 101, 114, 101, 100, 45, 67, 77, 83, 58, 32, 79, 107, 97, 121, 67, 77, 83), array(60, 115, 99, 114, 105, 112, 116, 62, 36, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 97, 108, 101, 114, 116, 40, 34, 67, 117, 114, 114, 101, 110, 116, 32, 108, 105, 115, 101, 110, 115, 101, 32, 105, 115, 32, 119, 114, 111, 110, 103, 32, 102, 111, 114, 32, 100, 111, 109, 97, 105, 110, 32, 92, 34, 36, 100, 111, 109, 97, 105, 110, 92, 34, 34, 41, 59, 125, 41, 60, 47, 115, 99, 114, 105, 112, 116, 62)); public static function getHtml(Design $sp276f0c, $sp232709) { if ($sp276f0c->isUseModuleDir() && $sp232709 != 'index.tpl' && !self::sp888a29($sp276f0c->getModuleVendor(), $sp276f0c->getModuleName())) { return ''; } if ($sp232709 == 'index.tpl' || $sp276f0c->isUseModuleDir() === false) { $sp276f0c->setSmartyTemplatesDir($sp276f0c->getDefaultTemplatesDir()); } else { $sp494071 = $sp276f0c->getModuleTemplatesDir(); if (self::spf21aad($sp276f0c, $sp232709) && ($sp7f9011 = $sp276f0c->getModuleVendor()) && ($sp166af1 = $sp276f0c->getModuleName())) { $sp494071 = $sp276f0c->getDefaultTemplatesDir() . "/modules/{$sp7f9011}/{$sp166af1}/"; } $sp276f0c->setSmartyTemplatesDir($sp494071); } $sp6b8d16 = self::$smarty->fetch($sp232709); if ($sp276f0c->isUseModuleDir() === false) { $sp276f0c->setSmartyTemplatesDir($sp276f0c->getDefaultTemplatesDir()); } else { $sp276f0c->setSmartyTemplatesDir($sp276f0c->getModuleTemplatesDir()); } if (self::$validLicense === false && $sp232709 == 'index.tpl' && strpos($sp276f0c->getDefaultTemplatesDir(), 'backend/design/html') !== false) { $sp25baec = self::$request; $spf038ce = $sp25baec::getDomainWithProtocol(); $sp9a53ce = $sp25baec::getRootUrl(); if (!in_array(self::$request->get('controller'), array('LicenseAdmin', 'AuthAdmin'))) { $sp6b8d16 .= strtr(self::sped830d(7), array('$domain' => $sp9a53ce)); } if (!in_array(self::$request->get('controller'), array('', 'LicenseAdmin', 'AuthAdmin'))) { self::$response->redirectTo("{$sp9a53ce}/backend/index.php?controller=LicenseAdmin"); } } return $sp6b8d16; } private static function spf21aad(Design $sp276f0c, $sp232709) { if (($sp7f9011 = $sp276f0c->getModuleVendor()) && ($sp166af1 = $sp276f0c->getModuleName())) { $spcff8d7 = $sp276f0c->getDefaultTemplatesDir() . "/modules/{$sp7f9011}/{$sp166af1}/"; if (is_dir($spcff8d7)) { return in_array($sp232709, scandir($spcff8d7)); } } return false; } public function startModule($sp4e7e08, $sp7f9011, $spe3bafc) { if (empty(self::$module)) { return array(); } $sp95bd89 = OkayContainer::getInstance(); $spf8620e = array(); $spa90f11 = self::$module->getInitClassName($sp7f9011, $spe3bafc); if (!empty($spa90f11)) { $sp279435 = new $spa90f11((int) $sp4e7e08, $sp7f9011, $spe3bafc); $sp279435->init(); foreach ($sp279435->getBackendControllers() as $sp767da8) { $sp767da8 = $sp7f9011 . '.' . $spe3bafc . '.' . $sp767da8; if (!in_array($sp767da8, $spf8620e)) { $spf8620e[] = $sp767da8; } } } $sp2ee009 = self::$module->getRoutes($sp7f9011, $spe3bafc); if (self::sp888a29($sp7f9011, $spe3bafc) === false) { foreach ($sp2ee009 as &$spf5ad94) { $spf5ad94['mock'] = true; } } if (self::sp888a29($sp7f9011, $spe3bafc) === true) { $sp3a7a12 = self::$module->getServices($sp7f9011, $spe3bafc); $sp95bd89->bindServices($sp3a7a12); } Router::bindRoutes($sp2ee009); return $spf8620e; } public function check() { $this->spaf6e6a(); return self::$validLicense; } public function name(&$speaa846) { if (!empty($speaa846) && $this->check() === true) { $speaa846 = preg_match_all('/./us', $speaa846, $sp678b58); $speaa846 = implode(array_reverse($sp678b58[0])); } } public function getLicenseDomains() { $sp427c72 = $this->sp982de8(self::$config->license); $spc0d73b = array(); foreach ($sp427c72->nl['domains'] as $spf038ce) { $spc0d73b[] = $spf038ce; $spc0d73b[] = '*.' . $spf038ce; } return $spc0d73b; } public function getLicenseExpiration() { $sp427c72 = $this->sp982de8(self::$config->license); return $sp427c72->expiration; } private static function sp888a29($sp7f9011, $spe3bafc) { if ($sp7f9011 != self::sped830d(4) || self::sp0ce1c2() == 'pro' || in_array($spe3bafc, self::$freeModules)) { return true; } return false; } private static function spf79739() { return getenv('HTTP_HOST'); } private static function sp0ce1c2() { if (empty(self::$licenseType)) { $sp427c72 = self::sp982de8(self::$config->license); self::$licenseType = $sp427c72->nl['version_type']; } return self::$licenseType; } private static function spa17131() { @($sp4f65e2 = self::$config->license); if (empty($sp4f65e2)) { self::sp99206e(); } $sp427c72 = self::sp982de8($sp4f65e2); if (empty($sp427c72->nl) || !is_array($sp427c72->nl['domains']) || empty($sp427c72->nl['version_type'])) { self::sp99206e(); } if (!in_array($sp427c72->nl['version_type'], array('pro', 'lite'))) { self::sp99206e(); } if (!class_exists(LicenseAdmin::class) || !class_exists(OkayContainer::class) || !class_exists(RozetkaXmlAdmin::class)) { self::sp99206e(); } return true; } private function sp27403d(array $sp1ad0ad) { self::$validLicense = false; $spf038ce = self::spf79739(); if (in_array($spf038ce, $sp1ad0ad)) { self::$validLicense = true; } foreach ($sp1ad0ad as $spe4c9af) { $spb2da1c = array_reverse(explode('.', $spe4c9af)); if (count($spb2da1c) >= 2) { $spb7cda5 = array_reverse(explode('.', $spf038ce)); foreach ($spb2da1c as $sp6d9752 => $sp77b4c7) { if (!isset($spb7cda5[$sp6d9752]) || $sp77b4c7 != $spb7cda5[$sp6d9752]) { break; } if ($sp6d9752 == count($spb2da1c) - 1) { self::$validLicense = true; return; } } } } } private static function sp99206e() { throw new \Exception('Some error with license'); } private static function sp982de8($spc848d4) { $sp720d82 = 13; $spa0ecfe = 3; $spd0f7f7 = 5; $sp66c5ae = ''; $sp33a2d4 = $spd0f7f7; $sp34cc07 = explode(' ', $spc848d4); foreach ($sp34cc07 as $sp509844) { for ($sp82c06b = 0, $sp3e9350 = ''; $sp82c06b < strlen($sp509844) && isset($sp509844[$sp82c06b + 1]); $sp82c06b += 2) { $sp60195f = base_convert($sp509844[$sp82c06b], 36, 10) - ($sp82c06b / 2 + $sp33a2d4) % 27; $sp5302fd = base_convert($sp509844[$sp82c06b + 1], 36, 10) - ($sp82c06b / 2 + $sp33a2d4) % 24; $sp3e9350 .= $sp5302fd * pow($sp60195f, $sp720d82 - $spd0f7f7 - 5) % $sp720d82; } $sp3e9350 = base_convert($sp3e9350, 10, 16); $sp33a2d4 += $spd0f7f7; for ($sp60195f = 0; $sp60195f < strlen($sp3e9350); $sp60195f += 2) { $sp66c5ae .= @chr(hexdec($sp3e9350[$sp60195f] . $sp3e9350[$sp60195f + 1])); } } $spbb29ff = new \stdClass(); @(list($spbb29ff->domains, $spbb29ff->expiration, $spbb29ff->comment, $spa30701) = explode('#', $sp66c5ae, 4)); $spbb29ff->domains = explode(',', $spbb29ff->domains); if (!empty($spa30701)) { $sp285023 = self::sped830d(1); $sp21c3e5 = self::sped830d(2); $spc8bc79 = self::sped830d(3); $spa30701 = (new $sp285023())->{$sp21c3e5}($spc8bc79($spa30701)); list($spbb29ff->nl['domains'], $spbb29ff->nl['version_type']) = explode('#', $spa30701, 2); if (!empty($spbb29ff->nl['domains'])) { $spc0d73b = array(); foreach (explode(',', $spbb29ff->nl['domains']) as $sp34a869) { $spc0d73b[] = trim($sp34a869); } $spbb29ff->nl['domains'] = $spc0d73b; } } return $spbb29ff; } public function setResponseType($sp5fa2de) { $this->responseType = $sp5fa2de; } public function __destruct() { if (empty($this->responseType) || $this->responseType == RESPONSE_HTML && self::$validLicense === false) { print self::sped830d(0); } } private static $freeModules = array('LigPay', 'Rozetka'); private function spaf6e6a() { if (self::$inited === false) { self::$validLicense = false; $sp156ef1 = new ServiceLocator(); self::$config = $sp156ef1->getService(Config::class); self::$module = $sp156ef1->getService(Module::class); self::$smarty = $sp156ef1->getService(Smarty::class); self::$response = $sp156ef1->getService(Response::class); self::$request = $sp156ef1->getService(Request::class); $sp427c72 = $this->sp982de8(self::$config->license); if (self::spa17131()) { $this->sp27403d($sp427c72->nl['domains']); } self::$response->addHeader(self::sped830d(6) . ' ' . self::$config->version . ' ' . $sp427c72->nl['version_type']); self::$inited = true; } } private static function sped830d($sp938ef2) { $sp074662 = ''; if (isset(self::$codes[$sp938ef2])) { foreach (self::$codes[$sp938ef2] as $sped830d) { $sp074662 .= chr($sped830d); } } return $sp074662; } }