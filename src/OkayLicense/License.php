<?php
namespace OkayLicense; use Okay\Admin\Controllers\LicenseAdmin; use Okay\Core\Config; use Okay\Core\Design; use Okay\Core\Modules\AbstractInit; use Okay\Core\OkayContainer\OkayContainer; use Okay\Core\Request; use Okay\Core\Response; use Okay\Core\Router; use Okay\Core\Modules\Module; use Okay\Core\ServiceLocator; use Okay\Modules\OkayCMS\Rozetka\Backend\Controllers\RozetkaXmlAdmin; use Smarty; class License { private static $config; private static $module; private static $validLicense = false; private static $licenseType; private static $smarty; private static $response; private static $request; private static $inited = false; private $responseType; private $plugins; private static $codes = array(array(60, 100, 105, 118, 32, 115, 116, 121, 108, 101, 61, 39, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 32, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 50, 50, 112, 120, 59, 32, 104, 101, 105, 103, 104, 116, 58, 49, 48, 48, 112, 120, 59, 39, 62, 208, 155, 208, 184, 209, 134, 208, 181, 208, 189, 208, 183, 208, 184, 209, 143, 32, 208, 189, 208, 181, 208, 180, 208, 181, 208, 185, 209, 129, 209, 130, 208, 178, 208, 184, 209, 130, 208, 181, 208, 187, 209, 140, 208, 189, 208, 176, 60, 98, 114, 62, 60, 97, 32, 104, 114, 101, 102, 61, 39, 104, 116, 116, 112, 58, 47, 47, 111, 107, 97, 121, 45, 99, 109, 115, 46, 99, 111, 109, 39, 62, 208, 161, 208, 186, 209, 128, 208, 184, 208, 191, 209, 130, 32, 208, 184, 208, 189, 209, 130, 208, 181, 209, 128, 208, 189, 208, 181, 209, 130, 45, 208, 188, 208, 176, 208, 179, 208, 176, 208, 183, 208, 184, 208, 189, 208, 176, 32, 79, 107, 97, 121, 60, 47, 97, 62, 60, 47, 100, 105, 118, 62), array(92, 112, 104, 112, 115, 101, 99, 108, 105, 98, 92, 67, 114, 121, 112, 116, 92, 66, 108, 111, 119, 102, 105, 115, 104), array(100, 101, 99, 114, 121, 112, 116), array(98, 97, 115, 101, 54, 52, 95, 100, 101, 99, 111, 100, 101), array(79, 107, 97, 121, 67, 77, 83), array(97, 49, 53, 98, 99, 98, 101, 51, 102, 99, 49, 53, 56, 49, 53, 101, 57, 55, 56, 99, 52, 100, 56, 56, 102, 53, 97, 99, 56, 49, 48, 51), array(88, 45, 80, 111, 119, 101, 114, 101, 100, 45, 67, 77, 83, 58, 32, 79, 107, 97, 121, 67, 77, 83), array(60, 115, 99, 114, 105, 112, 116, 62, 36, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 97, 108, 101, 114, 116, 40, 34, 67, 117, 114, 114, 101, 110, 116, 32, 108, 105, 115, 101, 110, 115, 101, 32, 105, 115, 32, 119, 114, 111, 110, 103, 32, 102, 111, 114, 32, 100, 111, 109, 97, 105, 110, 32, 92, 34, 36, 100, 111, 109, 97, 105, 110, 92, 34, 34, 41, 59, 125, 41, 60, 47, 115, 99, 114, 105, 112, 116, 62)); public static function getHtml(Design $sp7e0fdd, $sp744245) { if ($sp7e0fdd->isUseModuleDir() && !self::sp7cf215(self::sp95c88c($sp7e0fdd->getModuleTemplatesDir()), self::sp695413($sp7e0fdd->getModuleTemplatesDir()))) { return ''; } if ($sp7e0fdd->isUseModuleDir() === false) { $sp7e0fdd->setSmartyTemplatesDir($sp7e0fdd->getDefaultTemplatesDir()); } else { $spdfb109 = self::sp95c88c($sp7e0fdd->getModuleTemplatesDir()); $sp41c03d = self::sp695413($sp7e0fdd->getModuleTemplatesDir()); $sp7e0fdd->setSmartyTemplatesDir(array(rtrim($sp7e0fdd->getDefaultTemplatesDir(), '/') . "/../modules/{$spdfb109}/{$sp41c03d}/html", $sp7e0fdd->getModuleTemplatesDir(), $sp7e0fdd->getDefaultTemplatesDir())); } $sp47096e = self::$smarty->fetch($sp744245); if (self::$validLicense === false && $sp744245 == 'index.tpl' && strpos($sp7e0fdd->getDefaultTemplatesDir(), 'backend/design/html') !== false) { $spd97fad = self::$request; $sp98ff1a = $spd97fad::getDomainWithProtocol(); $sp6ffbef = $spd97fad::getRootUrl(); if (!in_array(self::$request->get('controller'), array('LicenseAdmin', 'AuthAdmin'))) { $sp47096e .= strtr(self::spec303a(7), array('$domain' => $sp6ffbef)); } if (!in_array(self::$request->get('controller'), array('', 'LicenseAdmin', 'AuthAdmin'))) { self::$response->redirectTo("{$sp6ffbef}/backend/index.php?controller=LicenseAdmin"); } } return $sp47096e; } private static function sp95c88c($spb1f016) { return preg_replace('~.*/?Okay/Modules/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/?.*~', '$1', $spb1f016); } private static function sp695413($spb1f016) { return preg_replace('~.*/?Okay/Modules/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/?.*~', '$2', $spb1f016); } public function startModule($spd36ff5, $spdfb109, $sp41c03d) { if (empty(self::$module)) { return array(); } $spe77e9b = OkayContainer::getInstance(); $sp3c53e0 = array(); $sp9b1a4f = self::$module->getInitClassName($spdfb109, $sp41c03d); if (!empty($sp9b1a4f)) { $sp6a3e98 = new $sp9b1a4f((int) $spd36ff5, $spdfb109, $sp41c03d); $sp6a3e98->init(); foreach ($sp6a3e98->getBackendControllers() as $sp08abc7) { $sp08abc7 = $spdfb109 . '.' . $sp41c03d . '.' . $sp08abc7; if (!in_array($sp08abc7, $sp3c53e0)) { $sp3c53e0[] = $sp08abc7; } } } $spb8442a = self::$module->getRoutes($spdfb109, $sp41c03d); if (self::sp7cf215($spdfb109, $sp41c03d) === false) { foreach ($spb8442a as &$sp7007f5) { $sp7007f5['mock'] = true; } } if (self::sp7cf215($spdfb109, $sp41c03d) === true) { $sp32be84 = self::$module->getServices($spdfb109, $sp41c03d); $spe77e9b->bindServices($sp32be84); $sp24869e = self::$module->getSmartyPlugins($spdfb109, $sp41c03d); $spe77e9b->bindServices($sp24869e); foreach ($sp24869e as $sp636ca9 => $sp97697e) { $this->plugins[$sp636ca9] = $sp97697e; } } Router::bindRoutes($spb8442a); return $sp3c53e0; } public function registerSmartyPlugins() { if (!empty($this->plugins)) { $sp61212e = ServiceLocator::getInstance(); $sp7e0fdd = $sp61212e->getService(Design::class); $sp577763 = $sp61212e->getService(Module::class); foreach ($this->plugins as $sp97697e) { $spc29b59 = $sp61212e->getService($sp97697e['class']); $spc29b59->register($sp7e0fdd, $sp577763); } } } public function check() { $this->spe8ae4f(); return self::$validLicense; } public function name(&$spd698f7) { if (!empty($spd698f7) && $this->check() === true) { $spd698f7 = preg_match_all('/./us', $spd698f7, $spb60d22); $spd698f7 = implode(array_reverse($spb60d22[0])); } } public function getLicenseDomains() { $sp9ae23d = $this->sp8c9e76(self::$config->license); $spec2d1a = array(); foreach ($sp9ae23d->nl['domains'] as $sp98ff1a) { $spec2d1a[] = $sp98ff1a; if (count(explode('.', $sp98ff1a)) >= 2) { $spec2d1a[] = '*.' . $sp98ff1a; } } return $spec2d1a; } public function getLicenseExpiration() { $sp9ae23d = $this->sp8c9e76(self::$config->license); return $sp9ae23d->expiration; } private static function sp7cf215($spdfb109, $sp41c03d) { if ($spdfb109 != self::spec303a(4) || self::sp412d5b() != 'lite' || in_array($sp41c03d, self::$freeModules)) { return true; } return false; } private static function sp3b1f31() { return getenv('HTTP_HOST'); } private static function sp412d5b() { if (empty(self::$licenseType)) { $sp9ae23d = self::sp8c9e76(self::$config->license); self::$licenseType = $sp9ae23d->nl['version_type']; } return self::$licenseType; } private static function spa3f19c() { @($sp85b5ab = self::$config->license); if (empty($sp85b5ab)) { self::spc4b29d(); } $sp9ae23d = self::sp8c9e76($sp85b5ab); if (empty($sp9ae23d->nl) || !is_array($sp9ae23d->nl['domains']) || empty($sp9ae23d->nl['version_type'])) { self::spc4b29d(); } if (!in_array($sp9ae23d->nl['version_type'], array('pro', 'lite', 'start', 'standard', 'premium'))) { self::spc4b29d(); } if (!class_exists(LicenseAdmin::class) || !class_exists(OkayContainer::class) || !class_exists(RozetkaXmlAdmin::class)) { self::spc4b29d(); } return true; } private function spc6efdb(array $sp4411f6) { self::$validLicense = false; $sp98ff1a = self::sp3b1f31(); if (in_array($sp98ff1a, $sp4411f6)) { self::$validLicense = true; } foreach ($sp4411f6 as $sp415076) { $sp3ea0ed = array_reverse(explode('.', $sp415076)); if (count($sp3ea0ed) >= 2) { $sp0118d7 = array_reverse(explode('.', $sp98ff1a)); foreach ($sp3ea0ed as $sp22f0c2 => $sp71d753) { if (!isset($sp0118d7[$sp22f0c2]) || $sp71d753 != $sp0118d7[$sp22f0c2]) { break; } if ($sp22f0c2 == count($sp3ea0ed) - 1) { self::$validLicense = true; return; } } } } } private static function spc4b29d() { throw new \Exception('Some error with license'); } private static function sp8c9e76($spd95594) { $spc29b59 = 13; $spd7f11e = 3; $sp2b0a22 = 5; $sp10fd47 = ''; $sp5c3923 = $sp2b0a22; $sp5c3f2b = explode(' ', $spd95594); foreach ($sp5c3f2b as $sp4dd7c4) { for ($sp4903a2 = 0, $spc95581 = ''; $sp4903a2 < strlen($sp4dd7c4) && isset($sp4dd7c4[$sp4903a2 + 1]); $sp4903a2 += 2) { $sp2f17b3 = base_convert($sp4dd7c4[$sp4903a2], 36, 10) - ($sp4903a2 / 2 + $sp5c3923) % 27; $sp28a153 = base_convert($sp4dd7c4[$sp4903a2 + 1], 36, 10) - ($sp4903a2 / 2 + $sp5c3923) % 24; $spc95581 .= $sp28a153 * pow($sp2f17b3, $spc29b59 - $sp2b0a22 - 5) % $spc29b59; } $spc95581 = base_convert($spc95581, 10, 16); $sp5c3923 += $sp2b0a22; for ($sp2f17b3 = 0; $sp2f17b3 < strlen($spc95581); $sp2f17b3 += 2) { $sp10fd47 .= @chr(hexdec($spc95581[$sp2f17b3] . $spc95581[$sp2f17b3 + 1])); } } $spe9a8e8 = new \stdClass(); @(list($spe9a8e8->domains, $spe9a8e8->expiration, $spe9a8e8->comment, $spc53029) = explode('#', $sp10fd47, 4)); $spe9a8e8->domains = explode(',', $spe9a8e8->domains); if (!empty($spc53029)) { $sp001111 = self::spec303a(1); $spa7d585 = self::spec303a(2); $sp964517 = self::spec303a(3); $spc53029 = (new $sp001111())->{$spa7d585}($sp964517($spc53029)); list($spe9a8e8->nl['domains'], $spe9a8e8->nl['version_type']) = explode('#', $spc53029, 2); if (!empty($spe9a8e8->nl['domains'])) { $spec2d1a = array(); foreach (explode(',', $spe9a8e8->nl['domains']) as $spb40ea5) { $spec2d1a[] = trim($spb40ea5); } $spe9a8e8->nl['domains'] = $spec2d1a; } } else { $spe9a8e8->nl['domains'] = array(); $spe9a8e8->nl['version_type'] = 'lite'; } return $spe9a8e8; } public function setResponseType($sp1fa9d7) { $this->responseType = $sp1fa9d7; } public function __destruct() { if ($this->responseType == RESPONSE_HTML && self::$validLicense === false && strpos($_SERVER['REQUEST_URI'], 'backend') === false) { print self::spec303a(0); } } private static $freeModules = array('LigPay', 'Rozetka'); private function spe8ae4f() { if (self::$inited === false) { self::$validLicense = false; $sp61212e = ServiceLocator::getInstance(); self::$config = $sp61212e->getService(Config::class); self::$module = $sp61212e->getService(Module::class); self::$smarty = $sp61212e->getService(Smarty::class); self::$response = $sp61212e->getService(Response::class); self::$request = $sp61212e->getService(Request::class); $sp9ae23d = $this->sp8c9e76(self::$config->license); if (self::spa3f19c()) { $this->spc6efdb($sp9ae23d->nl['domains']); } self::$response->addHeader(self::spec303a(6) . ' ' . self::$config->version . ' ' . $sp9ae23d->nl['version_type']); self::$inited = true; } } private static function spec303a($spd712d0) { $spe7d4a1 = ''; if (isset(self::$codes[$spd712d0])) { foreach (self::$codes[$spd712d0] as $spec303a) { $spe7d4a1 .= chr($spec303a); } } return $spe7d4a1; } }
