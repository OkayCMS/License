<?php
namespace OkayLicense; use Okay\Admin\Controllers\LicenseAdmin; use Okay\Core\Config; use Okay\Core\Design; use Okay\Core\Modules\AbstractInit; use Okay\Core\OkayContainer\OkayContainer; use Okay\Core\Request; use Okay\Core\Response; use Okay\Core\Router; use Okay\Core\Modules\Module; use Okay\Core\ServiceLocator; use Okay\Modules\OkayCMS\Rozetka\Backend\Controllers\RozetkaXmlAdmin; use Smarty; class License { private static $config; private static $module; private static $validLicense = false; private static $licenseType; private static $smarty; private static $response; private static $request; private static $inited = false; private $responseType; private $plugins; private static $codes = array(array(60, 100, 105, 118, 32, 115, 116, 121, 108, 101, 61, 39, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 99, 101, 110, 116, 101, 114, 59, 32, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 50, 50, 112, 120, 59, 32, 104, 101, 105, 103, 104, 116, 58, 49, 48, 48, 112, 120, 59, 39, 62, 208, 155, 208, 184, 209, 134, 208, 181, 208, 189, 208, 183, 208, 184, 209, 143, 32, 208, 189, 208, 181, 208, 180, 208, 181, 208, 185, 209, 129, 209, 130, 208, 178, 208, 184, 209, 130, 208, 181, 208, 187, 209, 140, 208, 189, 208, 176, 60, 98, 114, 62, 60, 97, 32, 104, 114, 101, 102, 61, 39, 104, 116, 116, 112, 58, 47, 47, 111, 107, 97, 121, 45, 99, 109, 115, 46, 99, 111, 109, 39, 62, 208, 161, 208, 186, 209, 128, 208, 184, 208, 191, 209, 130, 32, 208, 184, 208, 189, 209, 130, 208, 181, 209, 128, 208, 189, 208, 181, 209, 130, 45, 208, 188, 208, 176, 208, 179, 208, 176, 208, 183, 208, 184, 208, 189, 208, 176, 32, 79, 107, 97, 121, 60, 47, 97, 62, 60, 47, 100, 105, 118, 62), array(92, 112, 104, 112, 115, 101, 99, 108, 105, 98, 92, 67, 114, 121, 112, 116, 92, 66, 108, 111, 119, 102, 105, 115, 104), array(100, 101, 99, 114, 121, 112, 116), array(98, 97, 115, 101, 54, 52, 95, 100, 101, 99, 111, 100, 101), array(79, 107, 97, 121, 67, 77, 83), array(97, 49, 53, 98, 99, 98, 101, 51, 102, 99, 49, 53, 56, 49, 53, 101, 57, 55, 56, 99, 52, 100, 56, 56, 102, 53, 97, 99, 56, 49, 48, 51), array(88, 45, 80, 111, 119, 101, 114, 101, 100, 45, 67, 77, 83, 58, 32, 79, 107, 97, 121, 67, 77, 83), array(60, 115, 99, 114, 105, 112, 116, 62, 36, 40, 102, 117, 110, 99, 116, 105, 111, 110, 40, 41, 32, 123, 97, 108, 101, 114, 116, 40, 34, 67, 117, 114, 114, 101, 110, 116, 32, 108, 105, 115, 101, 110, 115, 101, 32, 105, 115, 32, 119, 114, 111, 110, 103, 32, 102, 111, 114, 32, 100, 111, 109, 97, 105, 110, 32, 92, 34, 36, 100, 111, 109, 97, 105, 110, 92, 34, 34, 41, 59, 125, 41, 60, 47, 115, 99, 114, 105, 112, 116, 62)); public static function getHtml(Design $spa94412, $spdd15c3) { if ($spa94412->isUseModuleDir() && !self::sp010309(self::sp710a91($spa94412->getModuleTemplatesDir()), self::sp0aa700($spa94412->getModuleTemplatesDir()))) { return ''; } if ($spa94412->isUseModuleDir() === false) { $spa94412->setSmartyTemplatesDir($spa94412->getDefaultTemplatesDir()); } else { $spc3dbf0 = self::sp710a91($spa94412->getModuleTemplatesDir()); $spbfc818 = self::sp0aa700($spa94412->getModuleTemplatesDir()); $spa94412->setSmartyTemplatesDir(array($spa94412->getModuleTemplatesDir(), rtrim($spa94412->getDefaultTemplatesDir(), '/') . "/modules/{$spc3dbf0}/{$spbfc818}", $spa94412->getDefaultTemplatesDir())); } $sp0fc8fd = self::$smarty->fetch($spdd15c3); if (self::$validLicense === false && $spdd15c3 == 'index.tpl' && strpos($spa94412->getDefaultTemplatesDir(), 'backend/design/html') !== false) { $sp87ab96 = self::$request; $spd33038 = $sp87ab96::getDomainWithProtocol(); $spa3db09 = $sp87ab96::getRootUrl(); if (!in_array(self::$request->get('controller'), array('LicenseAdmin', 'AuthAdmin'))) { $sp0fc8fd .= strtr(self::spe11226(7), array('$domain' => $spa3db09)); } if (!in_array(self::$request->get('controller'), array('', 'LicenseAdmin', 'AuthAdmin'))) { self::$response->redirectTo("{$spa3db09}/backend/index.php?controller=LicenseAdmin"); } } return $sp0fc8fd; } private static function sp710a91($sp43c801) { return preg_replace('~.*/?Okay/Modules/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/?.*~', '$1', $sp43c801); } private static function sp0aa700($sp43c801) { return preg_replace('~.*/?Okay/Modules/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)/?.*~', '$2', $sp43c801); } public function startModule($sp5e6587, $spc3dbf0, $spbfc818) { if (empty(self::$module)) { return array(); } $sp80d36f = OkayContainer::getInstance(); $sp8f857f = array(); $sp897ff7 = self::$module->getInitClassName($spc3dbf0, $spbfc818); if (!empty($sp897ff7)) { $sp35abb6 = new $sp897ff7((int) $sp5e6587, $spc3dbf0, $spbfc818); $sp35abb6->init(); foreach ($sp35abb6->getBackendControllers() as $sp9f992d) { $sp9f992d = $spc3dbf0 . '.' . $spbfc818 . '.' . $sp9f992d; if (!in_array($sp9f992d, $sp8f857f)) { $sp8f857f[] = $sp9f992d; } } } $spb29fd0 = self::$module->getRoutes($spc3dbf0, $spbfc818); if (self::sp010309($spc3dbf0, $spbfc818) === false) { foreach ($spb29fd0 as &$spbb1209) { $spbb1209['mock'] = true; } } if (self::sp010309($spc3dbf0, $spbfc818) === true) { $spe91553 = self::$module->getServices($spc3dbf0, $spbfc818); $sp80d36f->bindServices($spe91553); $sp015882 = self::$module->getSmartyPlugins($spc3dbf0, $spbfc818); $sp80d36f->bindServices($sp015882); foreach ($sp015882 as $sp6fcdd3 => $spea5c5d) { $this->plugins[$sp6fcdd3] = $spea5c5d; } } Router::bindRoutes($spb29fd0); return $sp8f857f; } public function registerSmartyPlugins() { $sp184d38 = new ServiceLocator(); $spa94412 = $sp184d38->getService(Design::class); $sp2e4315 = $sp184d38->getService(Module::class); foreach ($this->plugins as $spea5c5d) { $spb45320 = $sp184d38->getService($spea5c5d['class']); $spb45320->register($spa94412, $sp2e4315); } } public function check() { $this->sp872588(); return self::$validLicense; } public function name(&$sp0cd089) { if (!empty($sp0cd089) && $this->check() === true) { $sp0cd089 = preg_match_all('/./us', $sp0cd089, $sp277417); $sp0cd089 = implode(array_reverse($sp277417[0])); } } public function getLicenseDomains() { $sped7f31 = $this->spcecf9d(self::$config->license); $sp28ee26 = array(); foreach ($sped7f31->nl['domains'] as $spd33038) { $sp28ee26[] = $spd33038; if (count(explode('.', $spd33038)) >= 2) { $sp28ee26[] = '*.' . $spd33038; } } return $sp28ee26; } public function getLicenseExpiration() { $sped7f31 = $this->spcecf9d(self::$config->license); return $sped7f31->expiration; } private static function sp010309($spc3dbf0, $spbfc818) { if ($spc3dbf0 != self::spe11226(4) || self::spd40733() == 'pro' || in_array($spbfc818, self::$freeModules)) { return true; } return false; } private static function sp417ef2() { return getenv('HTTP_HOST'); } private static function spd40733() { if (empty(self::$licenseType)) { $sped7f31 = self::spcecf9d(self::$config->license); self::$licenseType = $sped7f31->nl['version_type']; } return self::$licenseType; } private static function spa43adc() { @($sp052e58 = self::$config->license); if (empty($sp052e58)) { self::sp033359(); } $sped7f31 = self::spcecf9d($sp052e58); if (empty($sped7f31->nl) || !is_array($sped7f31->nl['domains']) || empty($sped7f31->nl['version_type'])) { self::sp033359(); } if (!in_array($sped7f31->nl['version_type'], array('pro', 'lite'))) { self::sp033359(); } if (!class_exists(LicenseAdmin::class) || !class_exists(OkayContainer::class) || !class_exists(RozetkaXmlAdmin::class)) { self::sp033359(); } return true; } private function sp8dacd6(array $sp008e97) { self::$validLicense = false; $spd33038 = self::sp417ef2(); if (in_array($spd33038, $sp008e97)) { self::$validLicense = true; } foreach ($sp008e97 as $sp3bdbb7) { $spa4f8dc = array_reverse(explode('.', $sp3bdbb7)); if (count($spa4f8dc) >= 2) { $sp9a4785 = array_reverse(explode('.', $spd33038)); foreach ($spa4f8dc as $spba46f7 => $sp94c76d) { if (!isset($sp9a4785[$spba46f7]) || $sp94c76d != $sp9a4785[$spba46f7]) { break; } if ($spba46f7 == count($spa4f8dc) - 1) { self::$validLicense = true; return; } } } } } private static function sp033359() { throw new \Exception('Some error with license'); } private static function spcecf9d($sp7d0944) { $spb45320 = 13; $sp5594cf = 3; $sp439d4f = 5; $sp14055f = ''; $spf3d4f1 = $sp439d4f; $spb5cdfe = explode(' ', $sp7d0944); foreach ($spb5cdfe as $specd310) { for ($sp94836d = 0, $sp284141 = ''; $sp94836d < strlen($specd310) && isset($specd310[$sp94836d + 1]); $sp94836d += 2) { $spcb005f = base_convert($specd310[$sp94836d], 36, 10) - ($sp94836d / 2 + $spf3d4f1) % 27; $spcca6e3 = base_convert($specd310[$sp94836d + 1], 36, 10) - ($sp94836d / 2 + $spf3d4f1) % 24; $sp284141 .= $spcca6e3 * pow($spcb005f, $spb45320 - $sp439d4f - 5) % $spb45320; } $sp284141 = base_convert($sp284141, 10, 16); $spf3d4f1 += $sp439d4f; for ($spcb005f = 0; $spcb005f < strlen($sp284141); $spcb005f += 2) { $sp14055f .= @chr(hexdec($sp284141[$spcb005f] . $sp284141[$spcb005f + 1])); } } $spe20365 = new \stdClass(); @(list($spe20365->domains, $spe20365->expiration, $spe20365->comment, $sp11dc64) = explode('#', $sp14055f, 4)); $spe20365->domains = explode(',', $spe20365->domains); if (!empty($sp11dc64)) { $sp8613f9 = self::spe11226(1); $spff4168 = self::spe11226(2); $spc3205e = self::spe11226(3); $sp11dc64 = (new $sp8613f9())->{$spff4168}($spc3205e($sp11dc64)); list($spe20365->nl['domains'], $spe20365->nl['version_type']) = explode('#', $sp11dc64, 2); if (!empty($spe20365->nl['domains'])) { $sp28ee26 = array(); foreach (explode(',', $spe20365->nl['domains']) as $sp2f1aed) { $sp28ee26[] = trim($sp2f1aed); } $spe20365->nl['domains'] = $sp28ee26; } } else { $spe20365->nl['domains'] = array(); $spe20365->nl['version_type'] = 'lite'; } return $spe20365; } public function setResponseType($spa9e4a8) { $this->responseType = $spa9e4a8; } public function __destruct() { if ($this->responseType == RESPONSE_HTML && self::$validLicense === false && strpos($_SERVER['REQUEST_URI'], 'backend') === false) { print self::spe11226(0); } } private static $freeModules = array('LigPay', 'Rozetka'); private function sp872588() { if (self::$inited === false) { self::$validLicense = false; $sp184d38 = new ServiceLocator(); self::$config = $sp184d38->getService(Config::class); self::$module = $sp184d38->getService(Module::class); self::$smarty = $sp184d38->getService(Smarty::class); self::$response = $sp184d38->getService(Response::class); self::$request = $sp184d38->getService(Request::class); $sped7f31 = $this->spcecf9d(self::$config->license); if (self::spa43adc()) { $this->sp8dacd6($sped7f31->nl['domains']); } self::$response->addHeader(self::spe11226(6) . ' ' . self::$config->version . ' ' . $sped7f31->nl['version_type']); self::$inited = true; } } private static function spe11226($spc981a7) { $spe87f2d = ''; if (isset(self::$codes[$spc981a7])) { foreach (self::$codes[$spc981a7] as $spe11226) { $spe87f2d .= chr($spe11226); } } return $spe87f2d; } }
